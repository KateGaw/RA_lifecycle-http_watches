{"version":3,"sources":["models/Watch.js","components/WatchesForm.js","components/WatchesItem.js","components/Watches.js","App.js","serviceWorker.js","index.js"],"names":["WatchModel","entity","Object","assign","this","id","Math","random","name","timeZone","WatchesForm","props","useState","form","setForm","handleChange","event","target","value","prev","className","onSubmit","parseInt","preventDefault","htmlFor","type","onChange","max","min","defaultProps","WatchesItem","moment","add","format","time","setTime","useEffect","setInterval","clearInterval","onClick","onRemove","Watches","watches","setWatches","removeHandle","filter","watch","item","length","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e1c5905.chunk.js","sourcesContent":["class WatchModel {\n  constructor(entity) {\n    Object.assign(\n      this,\n      {\n        id: Math.random(),\n        name: \"\",\n        timeZone: 0,\n      },\n      entity\n    );\n  }\n}\n\nexport default WatchModel;\n","import React, { useState } from \"react\";\n\nconst WatchesForm = (props) => {\n  const [form, setForm] = useState({\n    name: \"\",\n    timeZone: \"\",\n  });\n  const handleChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    setForm((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n  const handleSubmit = (event) => {\n    const { name, timeZone } = form;\n    if (name !== \"\" && timeZone !== \"\") {\n      props.onSubmit({\n        name,\n        timeZone: parseInt(timeZone),\n      });\n      setForm({\n        name: \"\",\n        timeZone: \"\",\n      });\n    }\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"watches_form\" onSubmit={handleSubmit}>\n      <div className=\"watches_field\">\n        <label htmlFor=\"name\">Название</label>\n        <input\n          id=\"name\"\n          name=\"name\"\n          type=\"text\"\n          onChange={handleChange}\n          value={form.name}\n        />\n      </div>\n      <div className=\"watches_field\">\n        <label htmlFor=\"timeZone\">Временная зона</label>\n        <input\n          id=\"timeZone\"\n          max=\"23\"\n          min=\"-23\"\n          name=\"timeZone\"\n          type=\"number\"\n          onChange={handleChange}\n          value={form.timeZone}\n        />\n      </div>\n      <div className=\"watches_submit\">\n        <button className=\"watches_button\">Добавить</button>\n      </div>\n    </form>\n  );\n};\n\nWatchesForm.defaultProps = {\n  onSubmit: () => null,\n};\n\nexport default WatchesForm;\n","import React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\n\nconst WatchesItem = (props) => {\n  const [time, setTime] = useState(\n    moment().add(props.timeZone, \"h\").format(\"HH:mm:ss\")\n  );\n  const removeHandle = () => {\n    props.onRemove(props.id);\n  };\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTime(moment().add(props.timeZone, \"h\").format(\"HH:mm:ss\"));\n    }, 1000);\n\n    return () => {\n      if (id) {\n        clearInterval(id);\n      }\n    };\n  });\n\n  return (\n    <div className=\"watches_item\">\n      <h5>\n        {props.name} (\n        {props.timeZone > 0 ? `+${props.timeZone}` : props.timeZone})\n      </h5>\n      <button className=\"remove_btn\" type=\"button\" onClick={removeHandle}>\n        X\n      </button>\n      <p>{time}</p>\n    </div>\n  );\n};\n\nWatchesItem.defaultProps = {\n  onRemove: () => null,\n};\n\nexport default WatchesItem;\n","import React, { useState } from \"react\";\nimport WatchModel from \"../models/Watch\";\nimport WatchesForm from \"./WatchesForm\";\nimport WatchesItem from \"./WatchesItem\";\n\nconst Watches = () => {\n  const [watches, setWatches] = useState([]);\n\n  const submitHandle = (item) => {\n    setWatches((prev) => [...prev, new WatchModel(item)]);\n  };\n  const removeHandle = (id) => {\n    setWatches((prev) => prev.filter((watch) => watch.id !== id));\n  };\n\n  return (\n    <div className=\"watches\">\n      <WatchesForm onSubmit={submitHandle} />\n\n      {watches.length > 0 && (\n        <div className=\"watches_list\">\n          {watches.map((item) => (\n            <WatchesItem\n              key={item.id}\n              id={item.id}\n              name={item.name}\n              timeZone={item.timeZone}\n              onRemove={removeHandle}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Watches;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Watches from './components/Watches';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <Watches />\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}